
ST32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000928  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08000a58  08000a58  00010a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000adc  08000adc  0002012c  2**0
                  CONTENTS
  4 .ARM          00000000  08000adc  08000adc  0002012c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000adc  08000adc  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000adc  08000adc  00010adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae0  08000ae0  00010ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08000ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000012c  08000c10  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08000c10  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020155  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e53  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009cc  00000000  00000000  00021feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000278  00000000  00000000  000229b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001bd  00000000  00000000  00022c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014ab  00000000  00000000  00022ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016e6  00000000  00000000  00024298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005f01  00000000  00000000  0002597e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000814  00000000  00000000  0002b880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003e  00000000  00000000  0002c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000012c 	.word	0x2000012c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a40 	.word	0x08000a40

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000130 	.word	0x20000130
 800016c:	08000a40 	.word	0x08000a40

08000170 <a7a>:
//	    Return=2;
//	    }

}
void a7a (void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	static int volatile z=0;
	TOGGLE_BIT(z,0);
 8000174:	4b04      	ldr	r3, [pc, #16]	; (8000188 <a7a+0x18>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	f083 0301 	eor.w	r3, r3, #1
 800017c:	4a02      	ldr	r2, [pc, #8]	; (8000188 <a7a+0x18>)
 800017e:	6013      	str	r3, [r2, #0]
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000148 	.word	0x20000148

0800018c <ESP_ValidateCmd2>:
static void ESP_ValidateCmd2(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0

	    u8 Local_u8Cointer=0;
 8000192:	2300      	movs	r3, #0
 8000194:	71fb      	strb	r3, [r7, #7]
	    while(Globale_esp[Local_u8Cointer]!='\n')
 8000196:	e00b      	b.n	80001b0 <ESP_ValidateCmd2+0x24>
           {
		    UART_u8ReceiveCharAsynch(UART_Unit1, Globale_esp[Local_u8Cointer],&a7a);
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4a0b      	ldr	r2, [pc, #44]	; (80001c8 <ESP_ValidateCmd2+0x3c>)
 800019c:	5cd3      	ldrb	r3, [r2, r3]
 800019e:	b2db      	uxtb	r3, r3
 80001a0:	4a0a      	ldr	r2, [pc, #40]	; (80001cc <ESP_ValidateCmd2+0x40>)
 80001a2:	4619      	mov	r1, r3
 80001a4:	2000      	movs	r0, #0
 80001a6:	f000 fb2b 	bl	8000800 <UART_u8ReceiveCharAsynch>
	    	  Local_u8Cointer++;
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	3301      	adds	r3, #1
 80001ae:	71fb      	strb	r3, [r7, #7]
	    while(Globale_esp[Local_u8Cointer]!='\n')
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	4a05      	ldr	r2, [pc, #20]	; (80001c8 <ESP_ValidateCmd2+0x3c>)
 80001b4:	5cd3      	ldrb	r3, [r2, r3]
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	2b0a      	cmp	r3, #10
 80001ba:	d1ed      	bne.n	8000198 <ESP_ValidateCmd2+0xc>
//	    if((Globale_esp[0]=='o')&&(Globale_esp[1]=='k'))
//	    {
//	    Return=2;
//	    }

}
 80001bc:	bf00      	nop
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	20000000 	.word	0x20000000
 80001cc:	08000171 	.word	0x08000171

080001d0 <ESP_voidInit>:
void ESP_voidInit(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af00      	add	r7, sp, #0
	 * in ttl mode whicj we can see what we write, actually when we write the
	 * esp send what we send back to us , so we see it ,but if i turn off the
	 * echo, so i will send the commands but the esp will not send it back
	 * to be instead will send me the response only*/

	UART_u8SendStringSynch(ESP_UART,"ATE0\r\n");
 80001d6:	4920      	ldr	r1, [pc, #128]	; (8000258 <ESP_voidInit+0x88>)
 80001d8:	2000      	movs	r0, #0
 80001da:	f000 fb6f 	bl	80008bc <UART_u8SendStringSynch>
	ESP_ValidateCmd2();
 80001de:	f7ff ffd5 	bl	800018c <ESP_ValidateCmd2>

	UART_u8SendStringSynch(ESP_UART,"AT\r\n");
 80001e2:	491e      	ldr	r1, [pc, #120]	; (800025c <ESP_voidInit+0x8c>)
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 fb69 	bl	80008bc <UART_u8SendStringSynch>
	ESP_ValidateCmd2();
 80001ea:	f7ff ffcf 	bl	800018c <ESP_ValidateCmd2>

	for(u8 i=0;i<255;i++)
 80001ee:	2300      	movs	r3, #0
 80001f0:	71fb      	strb	r3, [r7, #7]
 80001f2:	e002      	b.n	80001fa <ESP_voidInit+0x2a>
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	3301      	adds	r3, #1
 80001f8:	71fb      	strb	r3, [r7, #7]
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2bff      	cmp	r3, #255	; 0xff
 80001fe:	d1f9      	bne.n	80001f4 <ESP_voidInit+0x24>
	{

	}
	/*reset the ESP*/
UART_u8SendStringSynch(ESP_UART,"AT+RST\r\n");
 8000200:	4917      	ldr	r1, [pc, #92]	; (8000260 <ESP_voidInit+0x90>)
 8000202:	2000      	movs	r0, #0
 8000204:	f000 fb5a 	bl	80008bc <UART_u8SendStringSynch>
ESP_ValidateCmd2();
 8000208:	f7ff ffc0 	bl	800018c <ESP_ValidateCmd2>
for(u8 i=0;i<255;i++)
 800020c:	2300      	movs	r3, #0
 800020e:	71bb      	strb	r3, [r7, #6]
 8000210:	e002      	b.n	8000218 <ESP_voidInit+0x48>
 8000212:	79bb      	ldrb	r3, [r7, #6]
 8000214:	3301      	adds	r3, #1
 8000216:	71bb      	strb	r3, [r7, #6]
 8000218:	79bb      	ldrb	r3, [r7, #6]
 800021a:	2bff      	cmp	r3, #255	; 0xff
 800021c:	d1f9      	bne.n	8000212 <ESP_voidInit+0x42>
{

}
	//*set the station mode*/

UART_u8SendStringSynch(ESP_UART,"AT+CWMODE=1\r\n");
 800021e:	4911      	ldr	r1, [pc, #68]	; (8000264 <ESP_voidInit+0x94>)
 8000220:	2000      	movs	r0, #0
 8000222:	f000 fb4b 	bl	80008bc <UART_u8SendStringSynch>
ESP_ValidateCmd2();
 8000226:	f7ff ffb1 	bl	800018c <ESP_ValidateCmd2>
for(u8 i=0;i<255;i++)
 800022a:	2300      	movs	r3, #0
 800022c:	717b      	strb	r3, [r7, #5]
 800022e:	e00b      	b.n	8000248 <ESP_voidInit+0x78>
{
	for(u8 j=0;j<255;j++)
 8000230:	2300      	movs	r3, #0
 8000232:	713b      	strb	r3, [r7, #4]
 8000234:	e002      	b.n	800023c <ESP_voidInit+0x6c>
 8000236:	793b      	ldrb	r3, [r7, #4]
 8000238:	3301      	adds	r3, #1
 800023a:	713b      	strb	r3, [r7, #4]
 800023c:	793b      	ldrb	r3, [r7, #4]
 800023e:	2bff      	cmp	r3, #255	; 0xff
 8000240:	d1f9      	bne.n	8000236 <ESP_voidInit+0x66>
for(u8 i=0;i<255;i++)
 8000242:	797b      	ldrb	r3, [r7, #5]
 8000244:	3301      	adds	r3, #1
 8000246:	717b      	strb	r3, [r7, #5]
 8000248:	797b      	ldrb	r3, [r7, #5]
 800024a:	2bff      	cmp	r3, #255	; 0xff
 800024c:	d1f0      	bne.n	8000230 <ESP_voidInit+0x60>
	{

	}
}
}
 800024e:	bf00      	nop
 8000250:	bf00      	nop
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}
 8000258:	08000a58 	.word	0x08000a58
 800025c:	08000a60 	.word	0x08000a60
 8000260:	08000a68 	.word	0x08000a68
 8000264:	08000a74 	.word	0x08000a74

08000268 <EXTI_voidClearBending>:
{
EXTI_Reg->SWIER|=1<<Copy_LineId;

}
static void EXTI_voidClearBending(Line_t Copy_LineId)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
EXTI_Reg->PR|=1<<Copy_LineId;
 8000272:	4b07      	ldr	r3, [pc, #28]	; (8000290 <EXTI_voidClearBending+0x28>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	2101      	movs	r1, #1
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	4611      	mov	r1, r2
 8000280:	4a03      	ldr	r2, [pc, #12]	; (8000290 <EXTI_voidClearBending+0x28>)
 8000282:	430b      	orrs	r3, r1
 8000284:	6153      	str	r3, [r2, #20]

}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr
 8000290:	40010400 	.word	0x40010400

08000294 <EXTI0_IRQHandler>:
	return Local_ErrorStatus;


}
void EXTI0_IRQHandler (void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	Local0_PvFunction();
 8000298:	4b03      	ldr	r3, [pc, #12]	; (80002a8 <EXTI0_IRQHandler+0x14>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4798      	blx	r3
	EXTI_voidClearBending(Line0);
 800029e:	2000      	movs	r0, #0
 80002a0:	f7ff ffe2 	bl	8000268 <EXTI_voidClearBending>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000014c 	.word	0x2000014c

080002ac <EXTI1_IRQHandler>:
void EXTI1_IRQHandler (void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	Local1_PvFunction();
 80002b0:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <EXTI1_IRQHandler+0x14>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4798      	blx	r3
	EXTI_voidClearBending(Line1);
 80002b6:	2001      	movs	r0, #1
 80002b8:	f7ff ffd6 	bl	8000268 <EXTI_voidClearBending>
}
 80002bc:	bf00      	nop
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000150 	.word	0x20000150

080002c4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	Local2_PvFunction();
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <EXTI2_IRQHandler+0x14>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4798      	blx	r3
EXTI_voidClearBending(Line2);
 80002ce:	2002      	movs	r0, #2
 80002d0:	f7ff ffca 	bl	8000268 <EXTI_voidClearBending>

}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000154 	.word	0x20000154

080002dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler (void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	Local3_PvFunction();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI3_IRQHandler+0x14>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4798      	blx	r3
	EXTI_voidClearBending(Line3);
 80002e6:	2003      	movs	r0, #3
 80002e8:	f7ff ffbe 	bl	8000268 <EXTI_voidClearBending>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000158 	.word	0x20000158

080002f4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler (void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	Local4_PvFunction();
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <EXTI4_IRQHandler+0x14>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4798      	blx	r3
	EXTI_voidClearBending(Line4);
 80002fe:	2004      	movs	r0, #4
 8000300:	f7ff ffb2 	bl	8000268 <EXTI_voidClearBending>
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000015c 	.word	0x2000015c

0800030c <GPIO_SetPinConfig>:
#include "../inc/GPIO_private.h"
#include "../inc/GPIO_register.h"
#include "../inc/GPIO_config.h"

GPIO_STATUS_t GPIO_SetPinConfig(PORT_t Copy_Port,PIN_t Copy_Pin,Bit_Mode_t Copy_Config)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
 8000316:	460b      	mov	r3, r1
 8000318:	71bb      	strb	r3, [r7, #6]
 800031a:	4613      	mov	r3, r2
 800031c:	717b      	strb	r3, [r7, #5]
	GPIO_STATUS_t Local_Error_Status=GPIO_ok;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]
	if(Copy_Port>GPIO_PORTC || Copy_Port<GPIO_PORTA)
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b02      	cmp	r3, #2
 8000326:	d902      	bls.n	800032e <GPIO_SetPinConfig+0x22>
	{
		Local_Error_Status=GPIO_Wrong_Port;
 8000328:	2301      	movs	r3, #1
 800032a:	73fb      	strb	r3, [r7, #15]
 800032c:	e0b3      	b.n	8000496 <GPIO_SetPinConfig+0x18a>
	}
	else if(Copy_Pin>PIN15 || Copy_Pin<PIN0)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	2b0f      	cmp	r3, #15
 8000332:	d902      	bls.n	800033a <GPIO_SetPinConfig+0x2e>
	{
		Local_Error_Status=GPIO_Wrong_bit;
 8000334:	2302      	movs	r3, #2
 8000336:	73fb      	strb	r3, [r7, #15]
 8000338:	e0ad      	b.n	8000496 <GPIO_SetPinConfig+0x18a>
	}else
	{

		if(Copy_Pin<8)
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	2b07      	cmp	r3, #7
 800033e:	d852      	bhi.n	80003e6 <GPIO_SetPinConfig+0xda>
		{
			switch(Copy_Port)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d037      	beq.n	80003b6 <GPIO_SetPinConfig+0xaa>
 8000346:	2b02      	cmp	r3, #2
 8000348:	f300 80a5 	bgt.w	8000496 <GPIO_SetPinConfig+0x18a>
 800034c:	2b00      	cmp	r3, #0
 800034e:	d002      	beq.n	8000356 <GPIO_SetPinConfig+0x4a>
 8000350:	2b01      	cmp	r3, #1
 8000352:	d018      	beq.n	8000386 <GPIO_SetPinConfig+0x7a>
 8000354:	e09f      	b.n	8000496 <GPIO_SetPinConfig+0x18a>
			{ case GPIO_PORTA : {GPIOA_CRL_Reg->GPIO_CRL_VARIABLE &=~((0b1111)<<(Copy_Pin*4));
 8000356:	4b53      	ldr	r3, [pc, #332]	; (80004a4 <GPIO_SetPinConfig+0x198>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	79ba      	ldrb	r2, [r7, #6]
 800035c:	0092      	lsls	r2, r2, #2
 800035e:	210f      	movs	r1, #15
 8000360:	fa01 f202 	lsl.w	r2, r1, r2
 8000364:	43d2      	mvns	r2, r2
 8000366:	4611      	mov	r1, r2
 8000368:	4a4e      	ldr	r2, [pc, #312]	; (80004a4 <GPIO_SetPinConfig+0x198>)
 800036a:	400b      	ands	r3, r1
 800036c:	6013      	str	r3, [r2, #0]
		                       	GPIOA_CRL_Reg->GPIO_CRL_VARIABLE |=((Copy_Config)<<(Copy_Pin*4));
 800036e:	4b4d      	ldr	r3, [pc, #308]	; (80004a4 <GPIO_SetPinConfig+0x198>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	7979      	ldrb	r1, [r7, #5]
 8000374:	79ba      	ldrb	r2, [r7, #6]
 8000376:	0092      	lsls	r2, r2, #2
 8000378:	fa01 f202 	lsl.w	r2, r1, r2
 800037c:	4611      	mov	r1, r2
 800037e:	4a49      	ldr	r2, [pc, #292]	; (80004a4 <GPIO_SetPinConfig+0x198>)
 8000380:	430b      	orrs	r3, r1
 8000382:	6013      	str	r3, [r2, #0]
		                    		break;
 8000384:	e087      	b.n	8000496 <GPIO_SetPinConfig+0x18a>
			                     }
			case GPIO_PORTB : {GPIOB_CRL_Reg->GPIO_CRL_VARIABLE &=~((0b1111)<<(Copy_Pin*4));
 8000386:	4b48      	ldr	r3, [pc, #288]	; (80004a8 <GPIO_SetPinConfig+0x19c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	79ba      	ldrb	r2, [r7, #6]
 800038c:	0092      	lsls	r2, r2, #2
 800038e:	210f      	movs	r1, #15
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	43d2      	mvns	r2, r2
 8000396:	4611      	mov	r1, r2
 8000398:	4a43      	ldr	r2, [pc, #268]	; (80004a8 <GPIO_SetPinConfig+0x19c>)
 800039a:	400b      	ands	r3, r1
 800039c:	6013      	str	r3, [r2, #0]
					                       	GPIOB_CRL_Reg->GPIO_CRL_VARIABLE |=((Copy_Config)<<(Copy_Pin*4));
 800039e:	4b42      	ldr	r3, [pc, #264]	; (80004a8 <GPIO_SetPinConfig+0x19c>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	7979      	ldrb	r1, [r7, #5]
 80003a4:	79ba      	ldrb	r2, [r7, #6]
 80003a6:	0092      	lsls	r2, r2, #2
 80003a8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ac:	4611      	mov	r1, r2
 80003ae:	4a3e      	ldr	r2, [pc, #248]	; (80004a8 <GPIO_SetPinConfig+0x19c>)
 80003b0:	430b      	orrs	r3, r1
 80003b2:	6013      	str	r3, [r2, #0]
					                    		break;
 80003b4:	e06f      	b.n	8000496 <GPIO_SetPinConfig+0x18a>
						                     }
			case GPIO_PORTC : {GPIOC_CRL_Reg->GPIO_CRL_VARIABLE &=~((0b1111)<<(Copy_Pin*4));
 80003b6:	4b3d      	ldr	r3, [pc, #244]	; (80004ac <GPIO_SetPinConfig+0x1a0>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	79ba      	ldrb	r2, [r7, #6]
 80003bc:	0092      	lsls	r2, r2, #2
 80003be:	210f      	movs	r1, #15
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	43d2      	mvns	r2, r2
 80003c6:	4611      	mov	r1, r2
 80003c8:	4a38      	ldr	r2, [pc, #224]	; (80004ac <GPIO_SetPinConfig+0x1a0>)
 80003ca:	400b      	ands	r3, r1
 80003cc:	6013      	str	r3, [r2, #0]
					                       	GPIOC_CRL_Reg->GPIO_CRL_VARIABLE |=((Copy_Config)<<(Copy_Pin*4));
 80003ce:	4b37      	ldr	r3, [pc, #220]	; (80004ac <GPIO_SetPinConfig+0x1a0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	7979      	ldrb	r1, [r7, #5]
 80003d4:	79ba      	ldrb	r2, [r7, #6]
 80003d6:	0092      	lsls	r2, r2, #2
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a33      	ldr	r2, [pc, #204]	; (80004ac <GPIO_SetPinConfig+0x1a0>)
 80003e0:	430b      	orrs	r3, r1
 80003e2:	6013      	str	r3, [r2, #0]
					                    		break;
 80003e4:	e057      	b.n	8000496 <GPIO_SetPinConfig+0x18a>
						                     }
			}
		}
		else if(Copy_Pin>7)
 80003e6:	79bb      	ldrb	r3, [r7, #6]
 80003e8:	2b07      	cmp	r3, #7
 80003ea:	d954      	bls.n	8000496 <GPIO_SetPinConfig+0x18a>
		{
			Copy_Pin=Copy_Pin-8;
 80003ec:	79bb      	ldrb	r3, [r7, #6]
 80003ee:	3b08      	subs	r3, #8
 80003f0:	71bb      	strb	r3, [r7, #6]
			switch(Copy_Port)
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d036      	beq.n	8000466 <GPIO_SetPinConfig+0x15a>
 80003f8:	2b02      	cmp	r3, #2
 80003fa:	dc4c      	bgt.n	8000496 <GPIO_SetPinConfig+0x18a>
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d002      	beq.n	8000406 <GPIO_SetPinConfig+0xfa>
 8000400:	2b01      	cmp	r3, #1
 8000402:	d018      	beq.n	8000436 <GPIO_SetPinConfig+0x12a>
 8000404:	e047      	b.n	8000496 <GPIO_SetPinConfig+0x18a>
			{ case GPIO_PORTA : {GPIOA_CRH_Reg->GPIO_CRH_VARIABLE &=~((0b1111)<<(Copy_Pin*4));
 8000406:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <GPIO_SetPinConfig+0x1a4>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	79ba      	ldrb	r2, [r7, #6]
 800040c:	0092      	lsls	r2, r2, #2
 800040e:	210f      	movs	r1, #15
 8000410:	fa01 f202 	lsl.w	r2, r1, r2
 8000414:	43d2      	mvns	r2, r2
 8000416:	4611      	mov	r1, r2
 8000418:	4a25      	ldr	r2, [pc, #148]	; (80004b0 <GPIO_SetPinConfig+0x1a4>)
 800041a:	400b      	ands	r3, r1
 800041c:	6013      	str	r3, [r2, #0]
		                       	GPIOA_CRH_Reg->GPIO_CRH_VARIABLE |=((Copy_Config)<<(Copy_Pin*4));
 800041e:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <GPIO_SetPinConfig+0x1a4>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	7979      	ldrb	r1, [r7, #5]
 8000424:	79ba      	ldrb	r2, [r7, #6]
 8000426:	0092      	lsls	r2, r2, #2
 8000428:	fa01 f202 	lsl.w	r2, r1, r2
 800042c:	4611      	mov	r1, r2
 800042e:	4a20      	ldr	r2, [pc, #128]	; (80004b0 <GPIO_SetPinConfig+0x1a4>)
 8000430:	430b      	orrs	r3, r1
 8000432:	6013      	str	r3, [r2, #0]
		                    		break;
 8000434:	e02f      	b.n	8000496 <GPIO_SetPinConfig+0x18a>
			                     }
			case GPIO_PORTB : {GPIOB_CRH_Reg->GPIO_CRH_VARIABLE &=~((0b1111)<<(Copy_Pin*4));
 8000436:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <GPIO_SetPinConfig+0x1a8>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	79ba      	ldrb	r2, [r7, #6]
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	210f      	movs	r1, #15
 8000440:	fa01 f202 	lsl.w	r2, r1, r2
 8000444:	43d2      	mvns	r2, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a1a      	ldr	r2, [pc, #104]	; (80004b4 <GPIO_SetPinConfig+0x1a8>)
 800044a:	400b      	ands	r3, r1
 800044c:	6013      	str	r3, [r2, #0]
					                       	GPIOB_CRH_Reg->GPIO_CRH_VARIABLE |=((Copy_Config)<<(Copy_Pin*4));
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <GPIO_SetPinConfig+0x1a8>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	7979      	ldrb	r1, [r7, #5]
 8000454:	79ba      	ldrb	r2, [r7, #6]
 8000456:	0092      	lsls	r2, r2, #2
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a15      	ldr	r2, [pc, #84]	; (80004b4 <GPIO_SetPinConfig+0x1a8>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6013      	str	r3, [r2, #0]
					                    		break;
 8000464:	e017      	b.n	8000496 <GPIO_SetPinConfig+0x18a>
						                     }
			case GPIO_PORTC : {GPIOC_CRH_Reg->GPIO_CRH_VARIABLE &=~((0b1111)<<(Copy_Pin*4));
 8000466:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <GPIO_SetPinConfig+0x1ac>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	79ba      	ldrb	r2, [r7, #6]
 800046c:	0092      	lsls	r2, r2, #2
 800046e:	210f      	movs	r1, #15
 8000470:	fa01 f202 	lsl.w	r2, r1, r2
 8000474:	43d2      	mvns	r2, r2
 8000476:	4611      	mov	r1, r2
 8000478:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <GPIO_SetPinConfig+0x1ac>)
 800047a:	400b      	ands	r3, r1
 800047c:	6013      	str	r3, [r2, #0]
					                       	GPIOC_CRH_Reg->GPIO_CRH_VARIABLE |=((Copy_Config)<<(Copy_Pin*4));
 800047e:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <GPIO_SetPinConfig+0x1ac>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	7979      	ldrb	r1, [r7, #5]
 8000484:	79ba      	ldrb	r2, [r7, #6]
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	fa01 f202 	lsl.w	r2, r1, r2
 800048c:	4611      	mov	r1, r2
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <GPIO_SetPinConfig+0x1ac>)
 8000490:	430b      	orrs	r3, r1
 8000492:	6013      	str	r3, [r2, #0]
					                    		break;
 8000494:	bf00      	nop
						                     }
			}
		}
	}
return Local_Error_Status;
 8000496:	7bfb      	ldrb	r3, [r7, #15]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	40010800 	.word	0x40010800
 80004a8:	40010c00 	.word	0x40010c00
 80004ac:	40011000 	.word	0x40011000
 80004b0:	40010804 	.word	0x40010804
 80004b4:	40010c04 	.word	0x40010c04
 80004b8:	40011004 	.word	0x40011004

080004bc <RCC_VidInit>:
#include "../inc/RCC_register.h"
#include "../inc/RCC_config.h"



void RCC_VidInit(void){
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0

	u16 Counter=0;
 80004c2:	2300      	movs	r3, #0
 80004c4:	80fb      	strh	r3, [r7, #6]
/*******************************************************************/
#ifdef  HSI

	RCC_CR_Reg->HSION=RCC_Enable;
 80004c6:	4a0f      	ldr	r2, [pc, #60]	; (8000504 <RCC_VidInit+0x48>)
 80004c8:	6813      	ldr	r3, [r2, #0]
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	6013      	str	r3, [r2, #0]
	while(RCC_CR_Reg->HSIRDY != RCC_Enable && Counter<CRC_TIME_OUT )
 80004d0:	e002      	b.n	80004d8 <RCC_VidInit+0x1c>
		{
			Counter++;
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	3301      	adds	r3, #1
 80004d6:	80fb      	strh	r3, [r7, #6]
	while(RCC_CR_Reg->HSIRDY != RCC_Enable && Counter<CRC_TIME_OUT )
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <RCC_VidInit+0x48>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d004      	beq.n	80004f0 <RCC_VidInit+0x34>
 80004e6:	88fb      	ldrh	r3, [r7, #6]
 80004e8:	f241 3287 	movw	r2, #4999	; 0x1387
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d9f0      	bls.n	80004d2 <RCC_VidInit+0x16>
		}

#ifndef PLL
RCC_CFGR_Reg->SW=HSI_SELECT_CLOCK;
 80004f0:	4a05      	ldr	r2, [pc, #20]	; (8000508 <RCC_VidInit+0x4c>)
 80004f2:	6813      	ldr	r3, [r2, #0]
 80004f4:	f36f 0301 	bfc	r3, #0, #2
 80004f8:	6013      	str	r3, [r2, #0]

RCC_CFGR_Reg->SW=PLL_SELECT_CLOCK;


#endif
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000
 8000508:	40021004 	.word	0x40021004

0800050c <RCC_voidEnablePeripheral>:

RCC_status RCC_voidEnablePeripheral(RCC_BUS_t Copy_Bus, Bus_EnPeripheral_t Copy_u8Peripheral){
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	460a      	mov	r2, r1
 8000516:	71fb      	strb	r3, [r7, #7]
 8000518:	4613      	mov	r3, r2
 800051a:	71bb      	strb	r3, [r7, #6]

	RCC_status Local_ErrorStatus=RCC_OK;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]
if(Copy_Bus>APB2_BUS || Copy_Bus<AHB_BUS)
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b02      	cmp	r3, #2
 8000524:	d902      	bls.n	800052c <RCC_voidEnablePeripheral+0x20>
{
	Local_ErrorStatus = RCC_BUS_ERR;
 8000526:	2301      	movs	r3, #1
 8000528:	73fb      	strb	r3, [r7, #15]
 800052a:	e030      	b.n	800058e <RCC_voidEnablePeripheral+0x82>

}
else if (Copy_u8Peripheral>30 )
 800052c:	79bb      	ldrb	r3, [r7, #6]
 800052e:	2b1e      	cmp	r3, #30
 8000530:	d902      	bls.n	8000538 <RCC_voidEnablePeripheral+0x2c>
{
	Local_ErrorStatus=RCC_PERIPHERAL_ERR;
 8000532:	2302      	movs	r3, #2
 8000534:	73fb      	strb	r3, [r7, #15]
 8000536:	e02a      	b.n	800058e <RCC_voidEnablePeripheral+0x82>
}
else
{
	switch( Copy_Bus ){
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d01c      	beq.n	8000578 <RCC_voidEnablePeripheral+0x6c>
 800053e:	2b02      	cmp	r3, #2
 8000540:	dc25      	bgt.n	800058e <RCC_voidEnablePeripheral+0x82>
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <RCC_voidEnablePeripheral+0x40>
 8000546:	2b01      	cmp	r3, #1
 8000548:	d00b      	beq.n	8000562 <RCC_voidEnablePeripheral+0x56>
 800054a:	e020      	b.n	800058e <RCC_voidEnablePeripheral+0x82>
				case AHB_BUS  : SET_BIT(RCC_AHBENR_REG,Copy_u8Peripheral); break;
 800054c:	4b13      	ldr	r3, [pc, #76]	; (800059c <RCC_voidEnablePeripheral+0x90>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	79ba      	ldrb	r2, [r7, #6]
 8000552:	2101      	movs	r1, #1
 8000554:	fa01 f202 	lsl.w	r2, r1, r2
 8000558:	4611      	mov	r1, r2
 800055a:	4a10      	ldr	r2, [pc, #64]	; (800059c <RCC_voidEnablePeripheral+0x90>)
 800055c:	430b      	orrs	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	e015      	b.n	800058e <RCC_voidEnablePeripheral+0x82>
				case APB1_BUS : SET_BIT(RCC_APB1ENR_REG,Copy_u8Peripheral); break;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <RCC_voidEnablePeripheral+0x94>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	79ba      	ldrb	r2, [r7, #6]
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	4611      	mov	r1, r2
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <RCC_voidEnablePeripheral+0x94>)
 8000572:	430b      	orrs	r3, r1
 8000574:	6013      	str	r3, [r2, #0]
 8000576:	e00a      	b.n	800058e <RCC_voidEnablePeripheral+0x82>
				case APB2_BUS : SET_BIT(RCC_APB2ENR_REG,Copy_u8Peripheral); break;
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <RCC_voidEnablePeripheral+0x98>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	79ba      	ldrb	r2, [r7, #6]
 800057e:	2101      	movs	r1, #1
 8000580:	fa01 f202 	lsl.w	r2, r1, r2
 8000584:	4611      	mov	r1, r2
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <RCC_voidEnablePeripheral+0x98>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	bf00      	nop
			}
}
return Local_ErrorStatus;
 800058e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40021014 	.word	0x40021014
 80005a0:	4002101c 	.word	0x4002101c
 80005a4:	40021018 	.word	0x40021018

080005a8 <SysTick_Handler>:




void SysTick_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	Local_PvFunction();
 80005ac:	4b02      	ldr	r3, [pc, #8]	; (80005b8 <SysTick_Handler+0x10>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4798      	blx	r3
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000160 	.word	0x20000160

080005bc <UART_voidInit>:
#include "../inc/UART_private.h"
#include "../inc/UART_config.h"

u8* Global_Recieve=NULL;
void UART_voidInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0

#ifdef UART1
	   /*Baud Rate Selection*/
	/*BAUD = F_CK/(16*UARTDIV)*/

u32 LOC_u64Mantissa_1 = ( F_CPU ) / ( 16 * USART1_BAUD_RATE ) ;
 80005c2:	2304      	movs	r3, #4
 80005c4:	60fb      	str	r3, [r7, #12]
u32 LOC_u64Fraction_1 = ((LOC_u64Mantissa_1 % 100) * 16 + 7) / 16;
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4b56      	ldr	r3, [pc, #344]	; (8000724 <UART_voidInit+0x168>)
 80005ca:	fba3 1302 	umull	r1, r3, r3, r2
 80005ce:	095b      	lsrs	r3, r3, #5
 80005d0:	2164      	movs	r1, #100	; 0x64
 80005d2:	fb01 f303 	mul.w	r3, r1, r3
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	3307      	adds	r3, #7
 80005dc:	091b      	lsrs	r3, r3, #4
 80005de:	60bb      	str	r3, [r7, #8]

if (LOC_u64Fraction_1 > 15) {
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	2b0f      	cmp	r3, #15
 80005e4:	d904      	bls.n	80005f0 <UART_voidInit+0x34>
    LOC_u64Mantissa_1 += 1;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	3301      	adds	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
    LOC_u64Fraction_1 = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
}

USART1_BRR_Reg->DIV_MANTISSA=LOC_u64Mantissa_1;
 80005f0:	4a4d      	ldr	r2, [pc, #308]	; (8000728 <UART_voidInit+0x16c>)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80005f8:	b299      	uxth	r1, r3
 80005fa:	6813      	ldr	r3, [r2, #0]
 80005fc:	f361 130f 	bfi	r3, r1, #4, #12
 8000600:	6013      	str	r3, [r2, #0]
USART1_BRR_Reg->DIV_FACTOR=LOC_u64Fraction_1;
 8000602:	4a49      	ldr	r2, [pc, #292]	; (8000728 <UART_voidInit+0x16c>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	b2d9      	uxtb	r1, r3
 800060c:	6813      	ldr	r3, [r2, #0]
 800060e:	f361 0303 	bfi	r3, r1, #0, #4
 8000612:	6013      	str	r3, [r2, #0]

/*Word Length*/

USART1_CR1_Reg->M=UART1_WORD_SIZE;
 8000614:	4a45      	ldr	r2, [pc, #276]	; (800072c <UART_voidInit+0x170>)
 8000616:	6813      	ldr	r3, [r2, #0]
 8000618:	f36f 330c 	bfc	r3, #12, #1
 800061c:	6013      	str	r3, [r2, #0]

/*Parity Control*/
#if   UART1_PARITY == UART1_PAR_DISABLE
     USART1_CR1_Reg->PCE=0;
 800061e:	4a43      	ldr	r2, [pc, #268]	; (800072c <UART_voidInit+0x170>)
 8000620:	6813      	ldr	r3, [r2, #0]
 8000622:	f36f 238a 	bfc	r3, #10, #1
 8000626:	6013      	str	r3, [r2, #0]
#endif


#if  USART1_INTERRUPT == INT_DISABLE

     USART1_CR1_Reg->TXEIE=0;
 8000628:	4a40      	ldr	r2, [pc, #256]	; (800072c <UART_voidInit+0x170>)
 800062a:	6813      	ldr	r3, [r2, #0]
 800062c:	f36f 13c7 	bfc	r3, #7, #1
 8000630:	6013      	str	r3, [r2, #0]
     USART1_CR1_Reg->TCIE=0;
 8000632:	4a3e      	ldr	r2, [pc, #248]	; (800072c <UART_voidInit+0x170>)
 8000634:	6813      	ldr	r3, [r2, #0]
 8000636:	f36f 1386 	bfc	r3, #6, #1
 800063a:	6013      	str	r3, [r2, #0]
     USART1_CR1_Reg->RXNEIE=0;
 800063c:	4a3b      	ldr	r2, [pc, #236]	; (800072c <UART_voidInit+0x170>)
 800063e:	6813      	ldr	r3, [r2, #0]
 8000640:	f36f 1345 	bfc	r3, #5, #1
 8000644:	6013      	str	r3, [r2, #0]


		#endif

     /*Stop Bit */
USART1_CR2_Reg->STOP=UART1_Stop_Bit_Condition;
 8000646:	4a3a      	ldr	r2, [pc, #232]	; (8000730 <UART_voidInit+0x174>)
 8000648:	6813      	ldr	r3, [r2, #0]
 800064a:	f36f 23cc 	bfc	r3, #11, #2
 800064e:	6013      	str	r3, [r2, #0]
/*UART1 RECEIVE AND TRANSMITE ENABLE*/
USART1_CR1_Reg->TE=1;
 8000650:	4a36      	ldr	r2, [pc, #216]	; (800072c <UART_voidInit+0x170>)
 8000652:	6813      	ldr	r3, [r2, #0]
 8000654:	f043 0308 	orr.w	r3, r3, #8
 8000658:	6013      	str	r3, [r2, #0]
USART1_CR1_Reg->RE=1;
 800065a:	4a34      	ldr	r2, [pc, #208]	; (800072c <UART_voidInit+0x170>)
 800065c:	6813      	ldr	r3, [r2, #0]
 800065e:	f043 0304 	orr.w	r3, r3, #4
 8000662:	6013      	str	r3, [r2, #0]

/*UART1_ENABLE*/
USART1_CR1_Reg->UE=1;
 8000664:	4a31      	ldr	r2, [pc, #196]	; (800072c <UART_voidInit+0x170>)
 8000666:	6813      	ldr	r3, [r2, #0]
 8000668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800066c:	6013      	str	r3, [r2, #0]
#endif

#ifdef UART2
/*Baud Rate Selection*/
/*BAUD = F_CK/(16*UARTDIV)*/
u32 LOC_u64Mantissa_2 = ( F_CPU ) / ( 16 * USART2_BAUD_RATE ) ;
 800066e:	2304      	movs	r3, #4
 8000670:	607b      	str	r3, [r7, #4]
u32 LOC_u64Fraction_2 = ((LOC_u64Mantissa_2 % 100) * 16 + 7) / 16;
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <UART_voidInit+0x168>)
 8000676:	fba3 1302 	umull	r1, r3, r3, r2
 800067a:	095b      	lsrs	r3, r3, #5
 800067c:	2164      	movs	r1, #100	; 0x64
 800067e:	fb01 f303 	mul.w	r3, r1, r3
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	011b      	lsls	r3, r3, #4
 8000686:	3307      	adds	r3, #7
 8000688:	091b      	lsrs	r3, r3, #4
 800068a:	603b      	str	r3, [r7, #0]

if (LOC_u64Fraction_2 > 15) {
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b0f      	cmp	r3, #15
 8000690:	d904      	bls.n	800069c <UART_voidInit+0xe0>
    LOC_u64Mantissa_2 += 1;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3301      	adds	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
    LOC_u64Fraction_2 = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	603b      	str	r3, [r7, #0]
}

USART2_BRR_Reg->DIV_MANTISSA=LOC_u64Mantissa_2;
 800069c:	4a25      	ldr	r2, [pc, #148]	; (8000734 <UART_voidInit+0x178>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006a4:	b299      	uxth	r1, r3
 80006a6:	6813      	ldr	r3, [r2, #0]
 80006a8:	f361 130f 	bfi	r3, r1, #4, #12
 80006ac:	6013      	str	r3, [r2, #0]
USART2_BRR_Reg->DIV_FACTOR=LOC_u64Fraction_2;
 80006ae:	4a21      	ldr	r2, [pc, #132]	; (8000734 <UART_voidInit+0x178>)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	b2d9      	uxtb	r1, r3
 80006b8:	6813      	ldr	r3, [r2, #0]
 80006ba:	f361 0303 	bfi	r3, r1, #0, #4
 80006be:	6013      	str	r3, [r2, #0]

/*Word Length*/

USART2_CR1_Reg->M=UART2_WORD_SIZE;
 80006c0:	4a1d      	ldr	r2, [pc, #116]	; (8000738 <UART_voidInit+0x17c>)
 80006c2:	6813      	ldr	r3, [r2, #0]
 80006c4:	f36f 330c 	bfc	r3, #12, #1
 80006c8:	6013      	str	r3, [r2, #0]

/*Parity Control*/
#if   UART2_PARITY == UART2_PAR_DISABLE
     USART2_CR1_Reg->PCE=0;
 80006ca:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <UART_voidInit+0x17c>)
 80006cc:	6813      	ldr	r3, [r2, #0]
 80006ce:	f36f 238a 	bfc	r3, #10, #1
 80006d2:	6013      	str	r3, [r2, #0]



#if  USART2_INTERRUPT == INT_DISABLE

     USART2_CR1_Reg->TXEIE=0;
 80006d4:	4a18      	ldr	r2, [pc, #96]	; (8000738 <UART_voidInit+0x17c>)
 80006d6:	6813      	ldr	r3, [r2, #0]
 80006d8:	f36f 13c7 	bfc	r3, #7, #1
 80006dc:	6013      	str	r3, [r2, #0]
     USART2_CR1_Reg->TCIE=0;
 80006de:	4a16      	ldr	r2, [pc, #88]	; (8000738 <UART_voidInit+0x17c>)
 80006e0:	6813      	ldr	r3, [r2, #0]
 80006e2:	f36f 1386 	bfc	r3, #6, #1
 80006e6:	6013      	str	r3, [r2, #0]
     USART2_CR1_Reg->RXNEIE=0;
 80006e8:	4a13      	ldr	r2, [pc, #76]	; (8000738 <UART_voidInit+0x17c>)
 80006ea:	6813      	ldr	r3, [r2, #0]
 80006ec:	f36f 1345 	bfc	r3, #5, #1
 80006f0:	6013      	str	r3, [r2, #0]


		#endif

     /*Stop Bit */
 USART2_CR2_Reg->STOP=UART2_Stop_Bit_Condition;
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <UART_voidInit+0x180>)
 80006f4:	6813      	ldr	r3, [r2, #0]
 80006f6:	f36f 23cc 	bfc	r3, #11, #2
 80006fa:	6013      	str	r3, [r2, #0]
 /*UART2 RECEIVE AND TRANSMITE ENABLE*/
 USART2_CR1_Reg->TE=1;
 80006fc:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <UART_voidInit+0x17c>)
 80006fe:	6813      	ldr	r3, [r2, #0]
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6013      	str	r3, [r2, #0]
 USART2_CR1_Reg->RE=1;
 8000706:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <UART_voidInit+0x17c>)
 8000708:	6813      	ldr	r3, [r2, #0]
 800070a:	f043 0304 	orr.w	r3, r3, #4
 800070e:	6013      	str	r3, [r2, #0]

 /*UART2_ENABLE*/
 USART2_CR1_Reg->UE=1;
 8000710:	4a09      	ldr	r2, [pc, #36]	; (8000738 <UART_voidInit+0x17c>)
 8000712:	6813      	ldr	r3, [r2, #0]
 8000714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000718:	6013      	str	r3, [r2, #0]



#endif

}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	51eb851f 	.word	0x51eb851f
 8000728:	40013808 	.word	0x40013808
 800072c:	4001380c 	.word	0x4001380c
 8000730:	40013810 	.word	0x40013810
 8000734:	40004408 	.word	0x40004408
 8000738:	4000440c 	.word	0x4000440c
 800073c:	40004410 	.word	0x40004410

08000740 <UART_u8SendCharSynch>:
return ret;
}


void UART_u8SendCharSynch(UART_t HardWare_Unit,u8 Copy_u16Data)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	460a      	mov	r2, r1
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	71bb      	strb	r3, [r7, #6]
switch(HardWare_Unit)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d02e      	beq.n	80007b4 <UART_u8SendCharSynch+0x74>
 8000756:	2b02      	cmp	r3, #2
 8000758:	dc40      	bgt.n	80007dc <UART_u8SendCharSynch+0x9c>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <UART_u8SendCharSynch+0x24>
 800075e:	2b01      	cmp	r3, #1
 8000760:	d014      	beq.n	800078c <UART_u8SendCharSynch+0x4c>
	            break;
          }
}


}
 8000762:	e03b      	b.n	80007dc <UART_u8SendCharSynch+0x9c>
        		while(USART1_SR_Reg->TXE != 1);
 8000764:	bf00      	nop
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <UART_u8SendCharSynch+0xa8>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b01      	cmp	r3, #1
 8000772:	d1f8      	bne.n	8000766 <UART_u8SendCharSynch+0x26>
        		USART1_DR_Reg=Copy_u16Data;
 8000774:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <UART_u8SendCharSynch+0xac>)
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	6013      	str	r3, [r2, #0]
        		while(USART1_SR_Reg->TC != 1);
 800077a:	bf00      	nop
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <UART_u8SendCharSynch+0xa8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b01      	cmp	r3, #1
 8000788:	d1f8      	bne.n	800077c <UART_u8SendCharSynch+0x3c>
	            break;
 800078a:	e027      	b.n	80007dc <UART_u8SendCharSynch+0x9c>
        		while(USART2_SR_Reg->TXE != 1);
 800078c:	bf00      	nop
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <UART_u8SendCharSynch+0xb0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b01      	cmp	r3, #1
 800079a:	d1f8      	bne.n	800078e <UART_u8SendCharSynch+0x4e>
        		USART2_DR_Reg=Copy_u16Data;
 800079c:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <UART_u8SendCharSynch+0xb4>)
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	6013      	str	r3, [r2, #0]
        		while(USART2_SR_Reg->TC != 1);
 80007a2:	bf00      	nop
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <UART_u8SendCharSynch+0xb0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d1f8      	bne.n	80007a4 <UART_u8SendCharSynch+0x64>
	            break;
 80007b2:	e013      	b.n	80007dc <UART_u8SendCharSynch+0x9c>
        		while(USART3_SR_Reg->TXE != 1);
 80007b4:	bf00      	nop
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <UART_u8SendCharSynch+0xb8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d1f8      	bne.n	80007b6 <UART_u8SendCharSynch+0x76>
        		USART3_DR_Reg=Copy_u16Data;
 80007c4:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <UART_u8SendCharSynch+0xbc>)
 80007c6:	79bb      	ldrb	r3, [r7, #6]
 80007c8:	6013      	str	r3, [r2, #0]
        		while(USART3_SR_Reg->TC != 1);
 80007ca:	bf00      	nop
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <UART_u8SendCharSynch+0xb8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d1f8      	bne.n	80007cc <UART_u8SendCharSynch+0x8c>
	            break;
 80007da:	bf00      	nop
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40013800 	.word	0x40013800
 80007ec:	40013804 	.word	0x40013804
 80007f0:	40004400 	.word	0x40004400
 80007f4:	40004404 	.word	0x40004404
 80007f8:	40004800 	.word	0x40004800
 80007fc:	40004804 	.word	0x40004804

08000800 <UART_u8ReceiveCharAsynch>:



Status_t UART_u8ReceiveCharAsynch(UART_t HardWare_Unit,u8 *Copy_p8ReceiveData,void(*Copy_pfISR)(void))
{
 8000800:	b480      	push	{r7}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	73fb      	strb	r3, [r7, #15]
	Status_t Local_Error=E_Ok;
 800080e:	2300      	movs	r3, #0
 8000810:	75fb      	strb	r3, [r7, #23]

	if(NULL == Copy_p8ReceiveData)
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <UART_u8ReceiveCharAsynch+0x1e>
	{
		Local_Error=E_Null_Pointer;
 8000818:	2302      	movs	r3, #2
 800081a:	75fb      	strb	r3, [r7, #23]
 800081c:	e03a      	b.n	8000894 <UART_u8ReceiveCharAsynch+0x94>
	}
	else
	{
		if(UART_Unit1==HardWare_Unit)
 800081e:	7bfb      	ldrb	r3, [r7, #15]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d110      	bne.n	8000846 <UART_u8ReceiveCharAsynch+0x46>
		{
			 UART1_CallBack=Copy_pfISR;
 8000824:	4a1e      	ldr	r2, [pc, #120]	; (80008a0 <UART_u8ReceiveCharAsynch+0xa0>)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6013      	str	r3, [r2, #0]
			 Global_Recieve=Copy_p8ReceiveData;
 800082a:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <UART_u8ReceiveCharAsynch+0xa4>)
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	6013      	str	r3, [r2, #0]
			 USART1_CR1_Reg->PEIE=1;
 8000830:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <UART_u8ReceiveCharAsynch+0xa8>)
 8000832:	6813      	ldr	r3, [r2, #0]
 8000834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000838:	6013      	str	r3, [r2, #0]
			 USART1_CR1_Reg->RXNEIE=1;
 800083a:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <UART_u8ReceiveCharAsynch+0xa8>)
 800083c:	6813      	ldr	r3, [r2, #0]
 800083e:	f043 0320 	orr.w	r3, r3, #32
 8000842:	6013      	str	r3, [r2, #0]
 8000844:	e026      	b.n	8000894 <UART_u8ReceiveCharAsynch+0x94>
		}
		else if(UART_Unit2==HardWare_Unit)
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	2b01      	cmp	r3, #1
 800084a:	d110      	bne.n	800086e <UART_u8ReceiveCharAsynch+0x6e>
		{
			UART2_CallBack=Copy_pfISR;
 800084c:	4a17      	ldr	r2, [pc, #92]	; (80008ac <UART_u8ReceiveCharAsynch+0xac>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
			 Global_Recieve=Copy_p8ReceiveData;
 8000852:	4a14      	ldr	r2, [pc, #80]	; (80008a4 <UART_u8ReceiveCharAsynch+0xa4>)
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	6013      	str	r3, [r2, #0]
			 USART2_CR1_Reg->PEIE=1;
 8000858:	4a15      	ldr	r2, [pc, #84]	; (80008b0 <UART_u8ReceiveCharAsynch+0xb0>)
 800085a:	6813      	ldr	r3, [r2, #0]
 800085c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000860:	6013      	str	r3, [r2, #0]
			 USART2_CR1_Reg->RXNEIE=1;
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <UART_u8ReceiveCharAsynch+0xb0>)
 8000864:	6813      	ldr	r3, [r2, #0]
 8000866:	f043 0320 	orr.w	r3, r3, #32
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	e012      	b.n	8000894 <UART_u8ReceiveCharAsynch+0x94>
		}
		else if (UART_Unit3==HardWare_Unit)
 800086e:	7bfb      	ldrb	r3, [r7, #15]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d10f      	bne.n	8000894 <UART_u8ReceiveCharAsynch+0x94>
		{
			UART3_CallBack=Copy_pfISR;
 8000874:	4a0f      	ldr	r2, [pc, #60]	; (80008b4 <UART_u8ReceiveCharAsynch+0xb4>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6013      	str	r3, [r2, #0]
			 Global_Recieve=Copy_p8ReceiveData;
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <UART_u8ReceiveCharAsynch+0xa4>)
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	6013      	str	r3, [r2, #0]
			 USART3_CR1_Reg->PEIE=1;
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <UART_u8ReceiveCharAsynch+0xb8>)
 8000882:	6813      	ldr	r3, [r2, #0]
 8000884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000888:	6013      	str	r3, [r2, #0]
			 USART3_CR1_Reg->RXNEIE=1;
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <UART_u8ReceiveCharAsynch+0xb8>)
 800088c:	6813      	ldr	r3, [r2, #0]
 800088e:	f043 0320 	orr.w	r3, r3, #32
 8000892:	6013      	str	r3, [r2, #0]
		}
	}
	return Local_Error;
 8000894:	7dfb      	ldrb	r3, [r7, #23]
}
 8000896:	4618      	mov	r0, r3
 8000898:	371c      	adds	r7, #28
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	20000164 	.word	0x20000164
 80008a4:	20000170 	.word	0x20000170
 80008a8:	4001380c 	.word	0x4001380c
 80008ac:	20000168 	.word	0x20000168
 80008b0:	4000440c 	.word	0x4000440c
 80008b4:	2000016c 	.word	0x2000016c
 80008b8:	4000480c 	.word	0x4000480c

080008bc <UART_u8SendStringSynch>:
	}
	return Local_Error;
}

Status_t UART_u8SendStringSynch(UART_t HardWare_Unit,u8* Copy_p8Data)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
	Status_t Local_ErrorStatus =E_Ok;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]
	u8 Local_Counter=NULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73bb      	strb	r3, [r7, #14]
if(NULL ==Copy_p8Data )
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10e      	bne.n	80008f4 <UART_u8SendStringSynch+0x38>
{

	Local_ErrorStatus=E_Null_Pointer;
 80008d6:	2302      	movs	r3, #2
 80008d8:	73fb      	strb	r3, [r7, #15]
 80008da:	e011      	b.n	8000900 <UART_u8SendStringSynch+0x44>

}else
{
		while(Copy_p8Data[Local_Counter]!='\0')
		{
			UART_u8SendCharSynch(HardWare_Unit,Copy_p8Data[Local_Counter]);
 80008dc:	7bbb      	ldrb	r3, [r7, #14]
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	4413      	add	r3, r2
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff29 	bl	8000740 <UART_u8SendCharSynch>
			Local_Counter++;
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	3301      	adds	r3, #1
 80008f2:	73bb      	strb	r3, [r7, #14]
		while(Copy_p8Data[Local_Counter]!='\0')
 80008f4:	7bbb      	ldrb	r3, [r7, #14]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	4413      	add	r3, r2
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d1ed      	bne.n	80008dc <UART_u8SendStringSynch+0x20>
		}
}

return Local_ErrorStatus;
 8000900:	7bfb      	ldrb	r3, [r7, #15]
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <USART1_IRQHandler>:
    }
    return 1;  // Equal

}
void USART1_IRQHandler (void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	*Global_Recieve=USART1_DR_Reg;
 8000910:	4b05      	ldr	r3, [pc, #20]	; (8000928 <USART1_IRQHandler+0x1c>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <USART1_IRQHandler+0x20>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	701a      	strb	r2, [r3, #0]
	UART1_CallBack();
 800091c:	4b04      	ldr	r3, [pc, #16]	; (8000930 <USART1_IRQHandler+0x24>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4798      	blx	r3
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40013804 	.word	0x40013804
 800092c:	20000170 	.word	0x20000170
 8000930:	20000164 	.word	0x20000164

08000934 <USART2_IRQHandler>:
void USART2_IRQHandler (void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	UART2_CallBack();
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <USART2_IRQHandler+0x10>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4798      	blx	r3
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000168 	.word	0x20000168

08000948 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	UART3_CallBack();
 800094c:	4b02      	ldr	r3, [pc, #8]	; (8000958 <USART3_IRQHandler+0x10>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4798      	blx	r3
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000016c 	.word	0x2000016c

0800095c <main>:
	TOGGLE_BIT(y,0);
	GPIO_SetPinValue(GPIO_PORTA,PIN0,y);

}
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	RCC_VidInit();
 8000960:	f7ff fdac 	bl	80004bc <RCC_VidInit>
	RCC_voidEnablePeripheral(APB2_BUS,APB2_GPIOAEN);
 8000964:	2102      	movs	r1, #2
 8000966:	2002      	movs	r0, #2
 8000968:	f7ff fdd0 	bl	800050c <RCC_voidEnablePeripheral>
	//RCC_voidEnablePeripheral(APB1_BUS,APB1_USART3EN);
	RCC_voidEnablePeripheral(APB2_BUS,APB2_USART1EN);
 800096c:	210e      	movs	r1, #14
 800096e:	2002      	movs	r0, #2
 8000970:	f7ff fdcc 	bl	800050c <RCC_voidEnablePeripheral>
RCC_voidEnablePeripheral(APB1_BUS,APB1_USART2EN);
 8000974:	2111      	movs	r1, #17
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fdc8 	bl	800050c <RCC_voidEnablePeripheral>


	GPIO_SetPinConfig(GPIO_PORTA,PIN9,OUTPUT_10MHZ_AF_PUSH);
 800097c:	2209      	movs	r2, #9
 800097e:	2109      	movs	r1, #9
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff fcc3 	bl	800030c <GPIO_SetPinConfig>
	GPIO_SetPinConfig(GPIO_PORTA,PIN10,INPUT_FLOATING);
 8000986:	2204      	movs	r2, #4
 8000988:	210a      	movs	r1, #10
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff fcbe 	bl	800030c <GPIO_SetPinConfig>

	GPIO_SetPinConfig(GPIO_PORTA,PIN0,OUTPUT_50MHZ_PUSH_PULL);
 8000990:	2203      	movs	r2, #3
 8000992:	2100      	movs	r1, #0
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff fcb9 	bl	800030c <GPIO_SetPinConfig>
EXT3_CallBack(&E3);

#endif


UART_voidInit();
 800099a:	f7ff fe0f 	bl	80005bc <UART_voidInit>
//NVIC_EnableInterrupt(37);

ESP_voidInit();
 800099e:	f7ff fc17 	bl	80001d0 <ESP_voidInit>





while(1)
 80009a2:	e7fe      	b.n	80009a2 <main+0x46>

080009a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ae:	490d      	ldr	r1, [pc, #52]	; (80009e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b0:	4a0d      	ldr	r2, [pc, #52]	; (80009e8 <LoopForever+0xe>)
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b4:	e002      	b.n	80009bc <LoopCopyDataInit>

080009b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ba:	3304      	adds	r3, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c0:	d3f9      	bcc.n	80009b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c4:	4c0a      	ldr	r4, [pc, #40]	; (80009f0 <LoopForever+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c8:	e001      	b.n	80009ce <LoopFillZerobss>

080009ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009cc:	3204      	adds	r2, #4

080009ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d0:	d3fb      	bcc.n	80009ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d2:	f000 f811 	bl	80009f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff ffc1 	bl	800095c <main>

080009da <LoopForever>:

LoopForever:
  b LoopForever
 80009da:	e7fe      	b.n	80009da <LoopForever>
  ldr   r0, =_estack
 80009dc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	2000012c 	.word	0x2000012c
  ldr r2, =_sidata
 80009e8:	08000ae4 	.word	0x08000ae4
  ldr r2, =_sbss
 80009ec:	2000012c 	.word	0x2000012c
  ldr r4, =_ebss
 80009f0:	20000174 	.word	0x20000174

080009f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_2_IRQHandler>
	...

080009f8 <__libc_init_array>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	2600      	movs	r6, #0
 80009fc:	4d0c      	ldr	r5, [pc, #48]	; (8000a30 <__libc_init_array+0x38>)
 80009fe:	4c0d      	ldr	r4, [pc, #52]	; (8000a34 <__libc_init_array+0x3c>)
 8000a00:	1b64      	subs	r4, r4, r5
 8000a02:	10a4      	asrs	r4, r4, #2
 8000a04:	42a6      	cmp	r6, r4
 8000a06:	d109      	bne.n	8000a1c <__libc_init_array+0x24>
 8000a08:	f000 f81a 	bl	8000a40 <_init>
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	4d0a      	ldr	r5, [pc, #40]	; (8000a38 <__libc_init_array+0x40>)
 8000a10:	4c0a      	ldr	r4, [pc, #40]	; (8000a3c <__libc_init_array+0x44>)
 8000a12:	1b64      	subs	r4, r4, r5
 8000a14:	10a4      	asrs	r4, r4, #2
 8000a16:	42a6      	cmp	r6, r4
 8000a18:	d105      	bne.n	8000a26 <__libc_init_array+0x2e>
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a20:	4798      	blx	r3
 8000a22:	3601      	adds	r6, #1
 8000a24:	e7ee      	b.n	8000a04 <__libc_init_array+0xc>
 8000a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2a:	4798      	blx	r3
 8000a2c:	3601      	adds	r6, #1
 8000a2e:	e7f2      	b.n	8000a16 <__libc_init_array+0x1e>
 8000a30:	08000adc 	.word	0x08000adc
 8000a34:	08000adc 	.word	0x08000adc
 8000a38:	08000adc 	.word	0x08000adc
 8000a3c:	08000ae0 	.word	0x08000ae0

08000a40 <_init>:
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	bf00      	nop
 8000a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a46:	bc08      	pop	{r3}
 8000a48:	469e      	mov	lr, r3
 8000a4a:	4770      	bx	lr

08000a4c <_fini>:
 8000a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4e:	bf00      	nop
 8000a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a52:	bc08      	pop	{r3}
 8000a54:	469e      	mov	lr, r3
 8000a56:	4770      	bx	lr
